#pragma once

#include <vector>
#include <functional>

#include "basic.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void arithmetic_coding(const std::vector<uchar>& data, _bit_vector& res);
void arithmetic_decoding(_bit_vector& data, std::vector<uchar>& res);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// количество информации в байтах сочетания + частоты
double information(std::vector<uchar>& a, double* permutations = nullptr, double* frequency = nullptr);
double size_arithmetic_coding(std::vector<uchar>& a, double frequency0 = 1.0); // идеальный размер арифметика

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct _frequency2
{
	i64 frequency[256] = {};
	i64 number = 256;

	i64 size();
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void stir_vector(std::vector<uchar>& v); // перемешать
std::vector<uchar> generate_vector(_frequency2& f);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uchar ppm(const std::vector<uchar>& data, std::vector<uchar>& res, u64 g = 0);
uchar ppm2(const std::vector<uchar>& data, std::vector<uchar>& res, u64 g = 0);
double ppm_test(const std::vector<uchar>& data, u64 g);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double delta_entropy(int n, double p1, std::vector<double>& k1);
double max_of_function(std::function<double(double)> func, double a, double b);
double entropy1bit(double p);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
